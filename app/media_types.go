// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "goa-erp": Application Media Types
//
// Command:
// $ goagen
// --design=goa-erp/design
// --out=$(GOPATH)\src\goa-erp
// --version=v1.3.0

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// system user table (default view)
//
// Identifier: application/vnd.account+json; view=default
type Account struct {
	// Date of create
	CreateDate *time.Time `form:"create_date,omitempty" json:"create_date,omitempty" xml:"create_date,omitempty"`
	// account id of create
	CreateUID *int `form:"create_uid,omitempty" json:"create_uid,omitempty" xml:"create_uid,omitempty"`
	// email of account
	Email string `form:"email" json:"email" xml:"email"`
	// ID of account
	ID int `form:"id" json:"id" xml:"id"`
	// Date of update
	UpdateDate *time.Time `form:"update_date,omitempty" json:"update_date,omitempty" xml:"update_date,omitempty"`
	// account id of update
	UpdateUID *int `form:"update_uid,omitempty" json:"update_uid,omitempty" xml:"update_uid,omitempty"`
	// username of account
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate validates the Account media type instance.
func (mt *Account) Validate() (err error) {

	if mt.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "username"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, mt.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, mt.Email, goa.FormatEmail, err2))
	}
	return
}

// AccountCollection is the media type for an array of Account (default view)
//
// Identifier: application/vnd.account+json; type=collection; view=default
type AccountCollection []*Account

// Validate validates the AccountCollection media type instance.
func (mt AccountCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// system user table (default view)
//
// Identifier: application/vnd.company+json; view=default
type Company struct {
	// Date of create
	CreateDate *time.Time `form:"create_date,omitempty" json:"create_date,omitempty" xml:"create_date,omitempty"`
	// company id of create
	CreateUID *int `form:"create_uid,omitempty" json:"create_uid,omitempty" xml:"create_uid,omitempty"`
	// ID of company
	ID int `form:"id" json:"id" xml:"id"`
	// name of company
	Name string `form:"name" json:"name" xml:"name"`
	// Date of update
	UpdateDate *time.Time `form:"update_date,omitempty" json:"update_date,omitempty" xml:"update_date,omitempty"`
	// company id of update
	UpdateUID *int `form:"update_uid,omitempty" json:"update_uid,omitempty" xml:"update_uid,omitempty"`
}

// Validate validates the Company media type instance.
func (mt *Company) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// CompanyCollection is the media type for an array of Company (default view)
//
// Identifier: application/vnd.company+json; type=collection; view=default
type CompanyCollection []*Company

// Validate validates the CompanyCollection media type instance.
func (mt CompanyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
